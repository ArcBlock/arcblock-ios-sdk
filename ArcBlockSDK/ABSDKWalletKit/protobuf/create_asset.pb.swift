// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: create_asset.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ForgeAbi_CreateAssetTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var moniker: String {
    get {return _storage._moniker}
    set {_uniqueStorage()._moniker = newValue}
  }

  /// forge won't update data into state if app is interested in this tx.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var readonly: Bool {
    get {return _storage._readonly}
    set {_uniqueStorage()._readonly = newValue}
  }

  public var transferrable: Bool {
    get {return _storage._transferrable}
    set {_uniqueStorage()._transferrable = newValue}
  }

  /// ttl for the asset after first consumption. 0 means unlimited.
  public var ttl: UInt32 {
    get {return _storage._ttl}
    set {_uniqueStorage()._ttl = newValue}
  }

  public var parent: String {
    get {return _storage._parent}
    set {_uniqueStorage()._parent = newValue}
  }

  /// asset address
  public var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ForgeAbi_AssetAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var transferrable: Bool = false

  public var ttl: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ForgeAbi_AssetFactory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// description of the asset factory
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// total assets it can create
  public var limit: UInt32 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  /// the price for the asset, in unit
  public var price: ForgeAbi_BigUint {
    get {return _storage._price ?? ForgeAbi_BigUint()}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {_uniqueStorage()._price = nil}

  /// the template that asset factory will use to generate the asset, template is
  /// string that could be processed by EEx with the given args, and its output
  /// is json. Then the json will be parsed and converted against the asset_name.
  /// e.g. If your asset name is `Ticket`,e.g. the the generated json data will
  /// be converted with `ForgeAbi.Ticket.new(json)`.
  public var template: String {
    get {return _storage._template}
    set {_uniqueStorage()._template = newValue}
  }

  /// allowed args for the template. In transfer tx, user can transfer tokens to
  /// this AssetFactory address with a json string containing necessary args,
  /// once the json is parsed, it will be checked against this, if any
  /// field not in the list, the transfer tx will fail.
  public var allowedSpecArgs: [String] {
    get {return _storage._allowedSpecArgs}
    set {_uniqueStorage()._allowedSpecArgs = newValue}
  }

  /// the protobuf message name for the asset. Note that this shall be registered
  /// to forge.
  public var assetName: String {
    get {return _storage._assetName}
    set {_uniqueStorage()._assetName = newValue}
  }

  /// asset attributes will be copied to generated asset. Note assets generated
  /// from asset factory is read only.
  public var attributes: ForgeAbi_AssetAttributes {
    get {return _storage._attributes ?? ForgeAbi_AssetAttributes()}
    set {_uniqueStorage()._attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  public var hasAttributes: Bool {return _storage._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  public mutating func clearAttributes() {_uniqueStorage()._attributes = nil}

  /// extra content that user can inject into the factory
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ForgeAbi_AssetFactoryState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var limit: UInt32 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var price: ForgeAbi_BigUint {
    get {return _storage._price ?? ForgeAbi_BigUint()}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {_uniqueStorage()._price = nil}

  public var template: String {
    get {return _storage._template}
    set {_uniqueStorage()._template = newValue}
  }

  public var allowedSpecArgs: [String] {
    get {return _storage._allowedSpecArgs}
    set {_uniqueStorage()._allowedSpecArgs = newValue}
  }

  public var assetName: String {
    get {return _storage._assetName}
    set {_uniqueStorage()._assetName = newValue}
  }

  public var attributes: ForgeAbi_AssetAttributes {
    get {return _storage._attributes ?? ForgeAbi_AssetAttributes()}
    set {_uniqueStorage()._attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  public var hasAttributes: Bool {return _storage._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  public mutating func clearAttributes() {_uniqueStorage()._attributes = nil}

  public var numCreated: UInt32 {
    get {return _storage._numCreated}
    set {_uniqueStorage()._numCreated = newValue}
  }

  /// extra context that user
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "forge_abi"

extension ForgeAbi_CreateAssetTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAssetTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "moniker"),
    2: .same(proto: "data"),
    3: .same(proto: "readonly"),
    4: .same(proto: "transferrable"),
    5: .same(proto: "ttl"),
    6: .same(proto: "parent"),
    7: .same(proto: "address"),
  ]

  fileprivate class _StorageClass {
    var _moniker: String = String()
    var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _readonly: Bool = false
    var _transferrable: Bool = false
    var _ttl: UInt32 = 0
    var _parent: String = String()
    var _address: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _moniker = source._moniker
      _data = source._data
      _readonly = source._readonly
      _transferrable = source._transferrable
      _ttl = source._ttl
      _parent = source._parent
      _address = source._address
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._moniker)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._readonly)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._transferrable)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._ttl)
        case 6: try decoder.decodeSingularStringField(value: &_storage._parent)
        case 7: try decoder.decodeSingularStringField(value: &_storage._address)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._moniker.isEmpty {
        try visitor.visitSingularStringField(value: _storage._moniker, fieldNumber: 1)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._readonly != false {
        try visitor.visitSingularBoolField(value: _storage._readonly, fieldNumber: 3)
      }
      if _storage._transferrable != false {
        try visitor.visitSingularBoolField(value: _storage._transferrable, fieldNumber: 4)
      }
      if _storage._ttl != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._ttl, fieldNumber: 5)
      }
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 6)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ForgeAbi_CreateAssetTx, rhs: ForgeAbi_CreateAssetTx) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._moniker != rhs_storage._moniker {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._readonly != rhs_storage._readonly {return false}
        if _storage._transferrable != rhs_storage._transferrable {return false}
        if _storage._ttl != rhs_storage._ttl {return false}
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._address != rhs_storage._address {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ForgeAbi_AssetAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetAttributes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transferrable"),
    2: .same(proto: "ttl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.transferrable)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.ttl)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transferrable != false {
      try visitor.visitSingularBoolField(value: self.transferrable, fieldNumber: 1)
    }
    if self.ttl != 0 {
      try visitor.visitSingularUInt32Field(value: self.ttl, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ForgeAbi_AssetAttributes, rhs: ForgeAbi_AssetAttributes) -> Bool {
    if lhs.transferrable != rhs.transferrable {return false}
    if lhs.ttl != rhs.ttl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ForgeAbi_AssetFactory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetFactory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "limit"),
    3: .same(proto: "price"),
    4: .same(proto: "template"),
    5: .standard(proto: "allowed_spec_args"),
    6: .standard(proto: "asset_name"),
    7: .same(proto: "attributes"),
    15: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _description_p: String = String()
    var _limit: UInt32 = 0
    var _price: ForgeAbi_BigUint? = nil
    var _template: String = String()
    var _allowedSpecArgs: [String] = []
    var _assetName: String = String()
    var _attributes: ForgeAbi_AssetAttributes? = nil
    var _data: SwiftProtobuf.Google_Protobuf_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _limit = source._limit
      _price = source._price
      _template = source._template
      _allowedSpecArgs = source._allowedSpecArgs
      _assetName = source._assetName
      _attributes = source._attributes
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._limit)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._price)
        case 4: try decoder.decodeSingularStringField(value: &_storage._template)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._allowedSpecArgs)
        case 6: try decoder.decodeSingularStringField(value: &_storage._assetName)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._attributes)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 1)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._limit, fieldNumber: 2)
      }
      if let v = _storage._price {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._template.isEmpty {
        try visitor.visitSingularStringField(value: _storage._template, fieldNumber: 4)
      }
      if !_storage._allowedSpecArgs.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allowedSpecArgs, fieldNumber: 5)
      }
      if !_storage._assetName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetName, fieldNumber: 6)
      }
      if let v = _storage._attributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ForgeAbi_AssetFactory, rhs: ForgeAbi_AssetFactory) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._limit != rhs_storage._limit {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._template != rhs_storage._template {return false}
        if _storage._allowedSpecArgs != rhs_storage._allowedSpecArgs {return false}
        if _storage._assetName != rhs_storage._assetName {return false}
        if _storage._attributes != rhs_storage._attributes {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ForgeAbi_AssetFactoryState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetFactoryState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "limit"),
    3: .same(proto: "price"),
    4: .same(proto: "template"),
    5: .standard(proto: "allowed_spec_args"),
    6: .standard(proto: "asset_name"),
    7: .same(proto: "attributes"),
    8: .standard(proto: "num_created"),
    15: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _description_p: String = String()
    var _limit: UInt32 = 0
    var _price: ForgeAbi_BigUint? = nil
    var _template: String = String()
    var _allowedSpecArgs: [String] = []
    var _assetName: String = String()
    var _attributes: ForgeAbi_AssetAttributes? = nil
    var _numCreated: UInt32 = 0
    var _data: SwiftProtobuf.Google_Protobuf_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _limit = source._limit
      _price = source._price
      _template = source._template
      _allowedSpecArgs = source._allowedSpecArgs
      _assetName = source._assetName
      _attributes = source._attributes
      _numCreated = source._numCreated
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._limit)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._price)
        case 4: try decoder.decodeSingularStringField(value: &_storage._template)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._allowedSpecArgs)
        case 6: try decoder.decodeSingularStringField(value: &_storage._assetName)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._attributes)
        case 8: try decoder.decodeSingularUInt32Field(value: &_storage._numCreated)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 1)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._limit, fieldNumber: 2)
      }
      if let v = _storage._price {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._template.isEmpty {
        try visitor.visitSingularStringField(value: _storage._template, fieldNumber: 4)
      }
      if !_storage._allowedSpecArgs.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allowedSpecArgs, fieldNumber: 5)
      }
      if !_storage._assetName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetName, fieldNumber: 6)
      }
      if let v = _storage._attributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._numCreated != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._numCreated, fieldNumber: 8)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ForgeAbi_AssetFactoryState, rhs: ForgeAbi_AssetFactoryState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._limit != rhs_storage._limit {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._template != rhs_storage._template {return false}
        if _storage._allowedSpecArgs != rhs_storage._allowedSpecArgs {return false}
        if _storage._assetName != rhs_storage._assetName {return false}
        if _storage._attributes != rhs_storage._attributes {return false}
        if _storage._numCreated != rhs_storage._numCreated {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
