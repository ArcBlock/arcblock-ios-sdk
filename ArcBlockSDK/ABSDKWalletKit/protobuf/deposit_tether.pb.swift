// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: deposit_tether.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ForgeAbi_DepositTetherTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The amount of token to deposit
  public var value: ForgeAbi_BigUint {
    get {return _storage._value ?? ForgeAbi_BigUint()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_uniqueStorage()._value = nil}

  /// The amount of token to reward custodian when the deposit is withdrew.
  public var commission: ForgeAbi_BigUint {
    get {return _storage._commission ?? ForgeAbi_BigUint()}
    set {_uniqueStorage()._commission = newValue}
  }
  /// Returns true if `commission` has been explicitly set.
  public var hasCommission: Bool {return _storage._commission != nil}
  /// Clears the value of `commission`. Subsequent reads from it will return its default value.
  public mutating func clearCommission() {_uniqueStorage()._commission = nil}

  /// The amount of toekn to reward custodian when the deposit is revoked.
  public var charge: ForgeAbi_BigUint {
    get {return _storage._charge ?? ForgeAbi_BigUint()}
    set {_uniqueStorage()._charge = newValue}
  }
  /// Returns true if `charge` has been explicitly set.
  public var hasCharge: Bool {return _storage._charge != nil}
  /// Clears the value of `charge`. Subsequent reads from it will return its default value.
  public mutating func clearCharge() {_uniqueStorage()._charge = nil}

  /// Target chain Id
  public var target: String {
    get {return _storage._target}
    set {_uniqueStorage()._target = newValue}
  }

  /// The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
  public var withdrawer: String {
    get {return _storage._withdrawer}
    set {_uniqueStorage()._withdrawer = newValue}
  }

  /// The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
  /// This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
  public var locktime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._locktime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._locktime = newValue}
  }
  /// Returns true if `locktime` has been explicitly set.
  public var hasLocktime: Bool {return _storage._locktime != nil}
  /// Clears the value of `locktime`. Subsequent reads from it will return its default value.
  public mutating func clearLocktime() {_uniqueStorage()._locktime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "forge_abi"

extension ForgeAbi_DepositTetherTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DepositTetherTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "commission"),
    3: .same(proto: "charge"),
    4: .same(proto: "target"),
    5: .same(proto: "withdrawer"),
    6: .same(proto: "locktime"),
  ]

  fileprivate class _StorageClass {
    var _value: ForgeAbi_BigUint? = nil
    var _commission: ForgeAbi_BigUint? = nil
    var _charge: ForgeAbi_BigUint? = nil
    var _target: String = String()
    var _withdrawer: String = String()
    var _locktime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
      _commission = source._commission
      _charge = source._charge
      _target = source._target
      _withdrawer = source._withdrawer
      _locktime = source._locktime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._commission)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._charge)
        case 4: try decoder.decodeSingularStringField(value: &_storage._target)
        case 5: try decoder.decodeSingularStringField(value: &_storage._withdrawer)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._locktime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._commission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._charge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._target.isEmpty {
        try visitor.visitSingularStringField(value: _storage._target, fieldNumber: 4)
      }
      if !_storage._withdrawer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._withdrawer, fieldNumber: 5)
      }
      if let v = _storage._locktime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ForgeAbi_DepositTetherTx, rhs: ForgeAbi_DepositTetherTx) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        if _storage._commission != rhs_storage._commission {return false}
        if _storage._charge != rhs_storage._charge {return false}
        if _storage._target != rhs_storage._target {return false}
        if _storage._withdrawer != rhs_storage._withdrawer {return false}
        if _storage._locktime != rhs_storage._locktime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
