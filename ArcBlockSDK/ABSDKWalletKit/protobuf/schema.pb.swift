// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: schema.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct AbtDidWorkshop_WorkshopAsset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var from: String = String()

  public var to: String = String()

  public var iat: UInt64 = 0

  public var nbf: UInt64 = 0

  public var exp: UInt64 = 0

  public var title: String = String()

  public var content: Int64 = 0

  public var sig: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "abt_did_workshop"

extension AbtDidWorkshop_WorkshopAsset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkshopAsset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "iat"),
    4: .same(proto: "nbf"),
    5: .same(proto: "exp"),
    6: .same(proto: "title"),
    7: .same(proto: "content"),
    8: .same(proto: "sig"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.from)
      case 2: try decoder.decodeSingularStringField(value: &self.to)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.iat)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.nbf)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.exp)
      case 6: try decoder.decodeSingularStringField(value: &self.title)
      case 7: try decoder.decodeSingularInt64Field(value: &self.content)
      case 8: try decoder.decodeSingularBytesField(value: &self.sig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if self.iat != 0 {
      try visitor.visitSingularUInt64Field(value: self.iat, fieldNumber: 3)
    }
    if self.nbf != 0 {
      try visitor.visitSingularUInt64Field(value: self.nbf, fieldNumber: 4)
    }
    if self.exp != 0 {
      try visitor.visitSingularUInt64Field(value: self.exp, fieldNumber: 5)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 6)
    }
    if self.content != 0 {
      try visitor.visitSingularInt64Field(value: self.content, fieldNumber: 7)
    }
    if !self.sig.isEmpty {
      try visitor.visitSingularBytesField(value: self.sig, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AbtDidWorkshop_WorkshopAsset, rhs: AbtDidWorkshop_WorkshopAsset) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.iat != rhs.iat {return false}
    if lhs.nbf != rhs.nbf {return false}
    if lhs.exp != rhs.exp {return false}
    if lhs.title != rhs.title {return false}
    if lhs.content != rhs.content {return false}
    if lhs.sig != rhs.sig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
