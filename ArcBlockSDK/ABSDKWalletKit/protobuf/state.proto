syntax = "proto3";
package ocap;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "type.proto";
import "tx.proto";

// State definition

message AccountState {
  BigUint balance = 1;

  // Used for anti-replay, updated whever this account sends a new transaction
  string nonce = 2;

  // Deprecated: will not be updated in future
  string num_txs = 3;

  string address = 4;
  bytes pk = 5;
  WalletType type = 6 [ deprecated = true ];
  string moniker = 7;
  StateContext context = 8;
  string issuer = 9;
  BigUint gas_balance = 10;

  // the address that is being migrated. Once this is set this account state is
  // read only. No further tx can alter this account state. And tx with "from"
  // equal to the old address will be rejected by ocap
  repeated string migrated_to = 13;
  repeated string migrated_from = 14;

  // DEPRECATED: will not be updated in future
  string num_assets = 15 [ deprecated = true ];

  StakeContext stake = 16 [ deprecated = true ];
  CircularQueue pinned_files = 17 [ deprecated = true ];
  // PokeInfo poke = 18; // deprecated
  // The current deposit this account has received. It cannot exceed the deposit cap.
  BigUint deposit_received = 19 [ deprecated = true ];

  CircularQueue withdraw_items = 20 [ deprecated = true ];
  // 20-49 reserve for future

  repeated IndexedTokenInput tokens = 21;

  google.protobuf.Any data = 50;
}

message AssetState {
  string address = 1;
  string owner = 2;
  string moniker = 3;
  bool readonly = 4;
  bool transferrable = 5;
  uint32 ttl = 6;
  // once it is consumed, it is untransferrable
  google.protobuf.Timestamp consumed_time = 7;
  // who issued the asset
  string issuer = 8;
  // parent address for the asset state, e.g. a ticket is inherited from an
  // event
  string parent = 9;

  StakeContext stake = 13 [ deprecated = true ];
  StateContext context = 14;

  google.protobuf.Any data = 50;
}

message CoreProtocol {
  string name = 1;
  string address = 2;
}

message ForgeState {
  string address = 1;
  // consensus parameters, in future we shall be able to modify it
  ConsensusParams consensus = 2;
  map<uint64, UpgradeTasks> tasks = 3;
  map<uint32, StakeSummary> stake_summary = 4;
  string version = 5;
  // string data_version = 6; current data version deprecated

  // app state returned by app
  // bytes forge_app_hash = 7; deprecated

  ForgeToken token = 8;
  TransactionConfig tx_config = 9;

  // StakeConfig stake_config = 10; deprecated
  // PokeConfig poke_config = 11; deprecated

  repeated CoreProtocol protocols = 12;
  map<string, uint32> gas = 13;
  UpgradeInfo upgrade_info = 14;

  // google.protobuf.Any data = 15; // deprecated

  map<string, AccountConfig> account_config = 16;
  TokenSwapConfig token_swap_config = 17;

  google.protobuf.Any data = 2047; // app can define their own app state
}

// keep a list of state root for different dbs (column families).
// RootState will be stored in the default column family, and we return the
// root hash for default column family, thus our app_state would contain all
// hashes from different column families.
message RootState {
  string address = 1;
  bytes account = 2;
  bytes asset = 3;
  bytes receipt = 4;
  bytes protocol = 5;
  bytes governance = 6;
  bytes custom = 7;
}

message StatisticsState {
  string address = 1;
  uint64 num_blocks = 2;
  uint64 num_txs = 3;
  BigUint num_stakes = 4;
  uint32 num_validators = 5;
  TxStatistics tx_statistics = 6;
}

// TODO: [peiling] We have already defined this state in core protocols repo.
// The only reason we define this state here again is because the protobuf
// definition ResponseGetSwapState needs to reference to this SwapState.
message SwapState {
  string hash = 1;
  string address = 2;
  bytes hashkey = 3;
  string sender = 4;
  string receiver = 5;
  BigUint value = 6;
  repeated string assets = 7;
  uint32 locktime = 8;
  bytes hashlock = 9;
  StateContext context = 10;
}

// TODO: [peiling] We have already defined this state in core protocols repo.
// The only reason we define this state here again is because the protobuf
// definition ResponseGetSwapStatistics needs to reference to this.
message SwapStatistics {
  string address = 1;
  BigUint locked_value_out = 2;
  BigUint locked_value_in = 3;
  uint32 locked_assets_out = 4;
  uint32 locked_assets_in = 5;
}

// a rule can check against the statistics values, e.g. state.num_txs < 10000,
// state.balance_delta < 50000, delta is calculated based on the
// configuration for interval.
message DelegateOpState {
  // all the individual rules in DelegateTx will be concat into one per type_url
  // by "AND"
  string rule = 1;

  uint64 num_txs = 2;
  uint64 num_txs_delta = 3;

  BigUint balance = 4;
  BigUint balance_delta = 5;
}

message DelegateState {
  string address = 1;
  map<string, DelegateOpState> ops = 2;

  // state context, replace exiting fields
  StateContext context = 14;

  // app can extend this
  google.protobuf.Any data = 15;
}

message TokenState {
  string address = 1;
  string issuer = 2;
  string name = 3;
  string description = 4;
  string symbol = 5;
  string unit = 6;
  uint32 decimal = 7;
  string icon = 8;
  string total_supply = 9;
  ForeignToken foreign_token = 10;

  StateContext context = 15;

  google.protobuf.Any data = 20;
}

// Very similar to AssetFactory, appended some state vars
message AssetFactoryState {
  string address = 1;
  string owner = 2;

  string name = 3;
  string description = 4;

  string settlement = 5;
  uint32 limit = 6;

  repeated string trusted_issuers = 7;

  IndexedFactoryInput input = 8;
  CreateAssetTx output = 9;
  repeated AssetFactoryHook hooks = 10;

  google.protobuf.Any data = 11;

  // mutable
  StateContext context = 12;
  BigUint balance = 13;
  repeated IndexedTokenInput tokens = 14;
  uint32 num_minted = 15;
  AssetDisplay display = 16;

  // mutable
  google.protobuf.Timestamp last_settlement = 17;
}

message StakeState {
  string address = 1;

  // Who can create/revoke this stake
  string sender = 2;

  // What is the stake for
  string receiver = 3;

  // Balance for staking
  // Actual Structure in statedb: map<tokenAddress, balance>
  // Structure when returned from graphql endpoint
  repeated IndexedTokenInput tokens = 4;

  // Assets for staking
  repeated string assets = 5;

  // Can user unstake from this stake asset
  // Usually used to lock the stake to avoid unexpected unstake
  bool revocable = 6;

  // Human readable reason for staking
  string message = 7;

  // Period to wait before revoking can be claimed, in seconds
  uint32 revoke_waiting_period = 8;

  // Revoked stake that are pending for claim
  repeated IndexedTokenInput revoked_tokens = 9;
  repeated string revoked_assets = 10;

  StateContext context = 30;
  google.protobuf.Any data = 50;
}

message RollupState {
  // FUTURE: how to handle 1 ocap token mapping to multiple foreign chains
  string address = 1;
  string token_address = 2;

  // FUTURE: how to support main token on foreign chain: such as ETH and BNB
  string contract_address = 4;

  // Future mutation to rollup validators and blocks must be signed by this validator.
  repeated RollupValidator seed_validators = 5;

  // List of verified validators that can handling rollup/rolludown traffic
  // Can only be updated by JoinRollupTx and LeaveRollupTx
  repeated RollupValidator validators = 6;

  // Mutable
  string min_stake_amount = 7;
  string max_stake_amount = 8;

  // Mutable
  uint32 min_signer_count = 9; // default to 1
  uint32 max_signer_count = 10;

  // Mutable
  uint32 min_block_size = 11; // default to 1
  uint32 max_block_size = 12; // default to 10, ideally cost < income

  // Mutable
  uint32 min_block_interval = 13; // in seconds
  // Minimum confirmations for a tx on foreign chain before it can submit to ocap chain
  uint32 min_block_confirmation = 14;

  // Immutable
  string issuer = 17;

  // Mutable
  // Following fields define the economic policy for the rollup
  // All fee and share fields are devided by 10000, and then converted to percentage for later calculation
  // Let's take following settings for example:
  // - deposit_fee_rate = 100 / 10000 = 1%,
  // - publisher_fee_share = 6000 / 10000 = 60%
  // - proposer_fee_share = 3000 / 10000 = 30%
  // When user deposit 10000 ABT, he will receive 9900 ABT after deposit, and pay 100 ABT as fee
  // After the tx is included in a block and published to foreign chain, the fee can be claimed:
  // - block publisher: 100 * 60% = 60 ABT, given to block publisher
  // - proposer total: 100 * 30% = 30 ABT, shared between tx proposer and block proposer
  // - validator total: 100 * 10% = 10 ABT, shared between all signers, including the proposer
  uint32 deposit_fee_rate = 18;
  uint32 withdraw_fee_rate = 19;
  uint32 proposer_fee_share = 20;
  uint32 publisher_fee_share = 21;

  // Mutable
  string min_deposit_amount = 22;
  string min_withdraw_amount = 23;

  // Mutable, updated on each new block
  uint64 block_height = 24;
  string block_hash = 25;

  IndexedTokenInput token_info = 26;
  string total_deposit_amount = 27;
  string total_withdraw_amount = 28;

  // Added since v1.13.45
  string max_deposit_amount = 29;
  string max_withdraw_amount = 30;
  string min_deposit_fee = 31;
  string max_deposit_fee = 32;
  string min_withdraw_fee = 33;
  string max_withdraw_fee = 34;
  bool paused = 35;

  // Added since v1.13.47
  ForeignToken foreign_token = 36;

  // Added since v1.13.53
  // How long the staking will be locked after the validator leave and revoke stake
  uint32 leave_waiting_period = 37;

  // Added since v1.13.61
  // How long have the non-producer publisher have to wait before he can publish the block
  // If a block is published by a non-producer, the producer will get slashed
  uint32 publish_waiting_period = 38;
  // If set to 100, then 1% x min_stake_amount will be slashed from the producer
  uint32 publish_slash_rate = 39;

  StateContext context = 40;
  google.protobuf.Any data = 50;
}

// RollupNode does not exist as an separate state
// Because it can be represented by accounts

message RollupBlock {
  // = sha3(merkle_root + previous_hash + txs_hash)
  string hash = 1;

  uint64 height = 2;

  // = merkle(txs.filter(x => x.type === withdraw))
  string merkle_root = 3;

  // = previous block hash
  string previous_hash = 4;

  // = sha3(sort(txs hash))
  string txs_hash = 5;

  // list of transaction hashes, can be used to recreate merkleRoot deterministicly
  // must all be valid transactions (exist, succeed, not included in any block)
  // must only contain deposit/withdraw transactions
  // when a new block is accepted, tokens will be minted for deposit transactions and burn for withdraw transactions
  repeated string txs = 6;

  // Must refer to a known validator for this chain
  string proposer = 7;

  // List of signatures by validators
  // This signature is generated by signing the block hash
  repeated Multisig signatures = 8;

  // Deprecated
  // All transactions included in this block should be executed before this time
  // Also used by block validators to validate transaction list for this block
  // string checkpoint = 9;

  string rollup = 10;

  // token stats
  string minted_amount = 11;
  string burned_amount = 12;

  // tatal reward amount for publisher, proposer and validator
  string reward_amount = 13;

  // Added since v1.13.61
  // Used to calculate the actual reward for speedup txs
  // The total reward from all txs should not be less than the min reward
  // And the publisher share of total reward should cover the block sync cost
  string min_reward = 14;

  StateContext context = 30;
  google.protobuf.Any data = 50;
}

message EvidenceState {
  string hash = 1;
  string data = 2;

  StateContext context = 30;
}
