// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// account
/// User can use this to lock a breached sk
/// Or upgrade his account to a more secure crypto algorithm
/// Or rotate account sk periodically for better security
public struct Ocap_AccountMigrateTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// new public key
  public var pk: Data = Data()

  /// new wallet type
  public var type: Ocap_WalletType {
    get {return _type ?? Ocap_WalletType()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// new wallet address
  public var address: String = String()

  /// the chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: Ocap_WalletType? = nil
  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_DeclareTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var moniker: String = String()

  public var issuer: String = String()

  /// ocap won't update data into state if app is interested in this tx.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_DelegateTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of the delegation between sender and receiver
  public var address: String = String()

  /// delegatee's address
  public var to: String = String()

  /// a list of operations permitted, ops will be merged when multiple delegation is done on same address
  public var ops: [Ocap_DelegateOp] = []

  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// if rules are empty, signature for this type_url is entirely delegated
/// otherwise rules are checked one by one, relationship between rules is AND.
/// a rule is an expression defined in rule_parser
/// (github.com/arcblock/rule-parser) one can setup
public struct Ocap_DelegateOp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var typeURL: String = String()

  public var rules: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ocap_RevokeDelegateTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of the delegation between sender and receiver
  public var address: String = String()

  /// delegatee's address
  public var to: String = String()

  public var typeUrls: [String] = []

  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// governance
public struct Ocap_UpdateConsensusParamsTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// new delegate config
  public var delegateConfig: Ocap_DelegateConfig {
    get {return _delegateConfig ?? Ocap_DelegateConfig()}
    set {_delegateConfig = newValue}
  }
  /// Returns true if `delegateConfig` has been explicitly set.
  public var hasDelegateConfig: Bool {return self._delegateConfig != nil}
  /// Clears the value of `delegateConfig`. Subsequent reads from it will return its default value.
  public mutating func clearDelegateConfig() {self._delegateConfig = nil}

  /// new declare config
  public var declareConfig: Ocap_DeclareConfig {
    get {return _declareConfig ?? Ocap_DeclareConfig()}
    set {_declareConfig = newValue}
  }
  /// Returns true if `declareConfig` has been explicitly set.
  public var hasDeclareConfig: Bool {return self._declareConfig != nil}
  /// Clears the value of `declareConfig`. Subsequent reads from it will return its default value.
  public mutating func clearDeclareConfig() {self._declareConfig = nil}

  /// new token swap config
  public var tokenSwapConfig: Ocap_TokenSwapConfig {
    get {return _tokenSwapConfig ?? Ocap_TokenSwapConfig()}
    set {_tokenSwapConfig = newValue}
  }
  /// Returns true if `tokenSwapConfig` has been explicitly set.
  public var hasTokenSwapConfig: Bool {return self._tokenSwapConfig != nil}
  /// Clears the value of `tokenSwapConfig`. Subsequent reads from it will return its default value.
  public mutating func clearTokenSwapConfig() {self._tokenSwapConfig = nil}

  /// new moderator address
  public var moderatorConfig: Ocap_AccountConfig {
    get {return _moderatorConfig ?? Ocap_AccountConfig()}
    set {_moderatorConfig = newValue}
  }
  /// Returns true if `moderatorConfig` has been explicitly set.
  public var hasModeratorConfig: Bool {return self._moderatorConfig != nil}
  /// Clears the value of `moderatorConfig`. Subsequent reads from it will return its default value.
  public mutating func clearModeratorConfig() {self._moderatorConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _delegateConfig: Ocap_DelegateConfig? = nil
  fileprivate var _declareConfig: Ocap_DeclareConfig? = nil
  fileprivate var _tokenSwapConfig: Ocap_TokenSwapConfig? = nil
  fileprivate var _moderatorConfig: Ocap_AccountConfig? = nil
}

public struct Ocap_UpgradeNodeTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the height node will be stopped at.
  public var height: UInt64 = 0

  /// the version next release is expected
  public var version: String = String()

  /// override the existing upgrade settings if there's already one. Use it with
  /// cautious.
  public var override: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// token swap
public struct Ocap_ApproveWithdrawTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the hash of withdraw tx
  public var withdrawTxHash: String = String()

  /// the evidence of the original transaction that
  public var evidence: Ocap_Evidence {
    get {return _evidence ?? Ocap_Evidence()}
    set {_evidence = newValue}
  }
  /// Returns true if `evidence` has been explicitly set.
  public var hasEvidence: Bool {return self._evidence != nil}
  /// Clears the value of `evidence`. Subsequent reads from it will return its default value.
  public mutating func clearEvidence() {self._evidence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _evidence: Ocap_Evidence? = nil
}

public struct Ocap_DepositTokenTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// how many units to issue
  public var value: Ocap_BigUint {
    get {return _value ?? Ocap_BigUint()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  /// address of the controlled account on Forge
  public var address: String = String()

  /// the evidence of the original transaction
  public var evidence: Ocap_Evidence {
    get {return _evidence ?? Ocap_Evidence()}
    set {_evidence = newValue}
  }
  /// Returns true if `evidence` has been explicitly set.
  public var hasEvidence: Bool {return self._evidence != nil}
  /// Clears the value of `evidence`. Subsequent reads from it will return its default value.
  public mutating func clearEvidence() {self._evidence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Ocap_BigUint? = nil
  fileprivate var _evidence: Ocap_Evidence? = nil
}

public struct Ocap_RevokeWithdrawTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the hash of withdraw tx
  public var withdrawTxHash: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Ocap_WithdrawTokenTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// how many units to withdraw
  public var value: Ocap_BigUint {
    get {return _value ?? Ocap_BigUint()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  /// foreign address to withdraw token to.
  public var to: String = String()

  /// type of the chain currently only "eth"
  public var chainType: String = String()

  /// chain id of the chain. Could be testnet or mainnet.
  public var chainID: String = String()

  /// the time that a withdraw token tx would expire so user can unlock her tokens from intermediate state
  public var ttl: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _ttl ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_ttl = newValue}
  }
  /// Returns true if `ttl` has been explicitly set.
  public var hasTtl: Bool {return self._ttl != nil}
  /// Clears the value of `ttl`. Subsequent reads from it will return its default value.
  public mutating func clearTtl() {self._ttl = nil}

  /// tx hash from a foreign chain
  public var hash: String = String()

  /// the chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Ocap_BigUint? = nil
  fileprivate var _ttl: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// trade
public struct Ocap_ExchangeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Ocap_BigUint {
    get {return _value ?? Ocap_BigUint()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var assets: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Ocap_BigUint? = nil
}

public struct Ocap_ExchangeInfoV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Ocap_BigUint {
    get {return _value ?? Ocap_BigUint()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var assets: [String] = []

  public var tokens: [Ocap_TokenInput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Ocap_BigUint? = nil
}

/// we could support these cases (and vise versa):
/// 1. sender fungible token <-> receiver one or more assets
/// 2. sender fungible token + asset <-> receiver one or more assets
/// 3. sender one or more assets <-> receiver one or more assets
public struct Ocap_ExchangeTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var to: String = String()

  public var sender: Ocap_ExchangeInfo {
    get {return _sender ?? Ocap_ExchangeInfo()}
    set {_sender = newValue}
  }
  /// Returns true if `sender` has been explicitly set.
  public var hasSender: Bool {return self._sender != nil}
  /// Clears the value of `sender`. Subsequent reads from it will return its default value.
  public mutating func clearSender() {self._sender = nil}

  public var receiver: Ocap_ExchangeInfo {
    get {return _receiver ?? Ocap_ExchangeInfo()}
    set {_receiver = newValue}
  }
  /// Returns true if `receiver` has been explicitly set.
  public var hasReceiver: Bool {return self._receiver != nil}
  /// Clears the value of `receiver`. Subsequent reads from it will return its default value.
  public mutating func clearReceiver() {self._receiver = nil}

  public var expiredAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiredAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiredAt = newValue}
  }
  /// Returns true if `expiredAt` has been explicitly set.
  public var hasExpiredAt: Bool {return self._expiredAt != nil}
  /// Clears the value of `expiredAt`. Subsequent reads from it will return its default value.
  public mutating func clearExpiredAt() {self._expiredAt = nil}

  /// the chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sender: Ocap_ExchangeInfo? = nil
  fileprivate var _receiver: Ocap_ExchangeInfo? = nil
  fileprivate var _expiredAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_ExchangeV2Tx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var to: String = String()

  public var sender: Ocap_ExchangeInfoV2 {
    get {return _sender ?? Ocap_ExchangeInfoV2()}
    set {_sender = newValue}
  }
  /// Returns true if `sender` has been explicitly set.
  public var hasSender: Bool {return self._sender != nil}
  /// Clears the value of `sender`. Subsequent reads from it will return its default value.
  public mutating func clearSender() {self._sender = nil}

  public var receiver: Ocap_ExchangeInfoV2 {
    get {return _receiver ?? Ocap_ExchangeInfoV2()}
    set {_receiver = newValue}
  }
  /// Returns true if `receiver` has been explicitly set.
  public var hasReceiver: Bool {return self._receiver != nil}
  /// Clears the value of `receiver`. Subsequent reads from it will return its default value.
  public mutating func clearReceiver() {self._receiver = nil}

  public var expiredAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiredAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiredAt = newValue}
  }
  /// Returns true if `expiredAt` has been explicitly set.
  public var hasExpiredAt: Bool {return self._expiredAt != nil}
  /// Clears the value of `expiredAt`. Subsequent reads from it will return its default value.
  public mutating func clearExpiredAt() {self._expiredAt = nil}

  /// the chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sender: Ocap_ExchangeInfoV2? = nil
  fileprivate var _receiver: Ocap_ExchangeInfoV2? = nil
  fileprivate var _expiredAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_TransferTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var to: String = String()

  public var value: Ocap_BigUint {
    get {return _value ?? Ocap_BigUint()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var assets: [String] = []

  /// the chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Ocap_BigUint? = nil
  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_TransferV2Tx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var to: String = String()

  public var value: Ocap_BigUint {
    get {return _value ?? Ocap_BigUint()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var assets: [String] = []

  public var tokens: [Ocap_TokenInput] = []

  /// the chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Ocap_BigUint? = nil
  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_TransferV3Tx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inputs: [Ocap_TransactionInput] = []

  public var outputs: [Ocap_TransactionInput] = []

  /// chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_CreateTokenTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var description_p: String = String()

  public var symbol: String = String()

  public var unit: String = String()

  public var decimal: Int32 = 0

  public var icon: String = String()

  public var totalSupply: String = String()

  public var address: String = String()

  public var erc20ContractAddress: String = String()

  /// the chain won't touch this field. Only the dapp shall handle it.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Ocap_ItxStub {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Ocap_ItxStub.OneOf_Value? = nil

  public var declare: Ocap_DeclareTx {
    get {
      if case .declare(let v)? = value {return v}
      return Ocap_DeclareTx()
    }
    set {value = .declare(newValue)}
  }

  public var delegate: Ocap_DelegateTx {
    get {
      if case .delegate(let v)? = value {return v}
      return Ocap_DelegateTx()
    }
    set {value = .delegate(newValue)}
  }

  public var revokeDelegate: Ocap_RevokeDelegateTx {
    get {
      if case .revokeDelegate(let v)? = value {return v}
      return Ocap_RevokeDelegateTx()
    }
    set {value = .revokeDelegate(newValue)}
  }

  public var accountMigrate: Ocap_AccountMigrateTx {
    get {
      if case .accountMigrate(let v)? = value {return v}
      return Ocap_AccountMigrateTx()
    }
    set {value = .accountMigrate(newValue)}
  }

  public var createAsset: Ocap_CreateAssetTx {
    get {
      if case .createAsset(let v)? = value {return v}
      return Ocap_CreateAssetTx()
    }
    set {value = .createAsset(newValue)}
  }

  public var updateAsset: Ocap_UpdateAssetTx {
    get {
      if case .updateAsset(let v)? = value {return v}
      return Ocap_UpdateAssetTx()
    }
    set {value = .updateAsset(newValue)}
  }

  public var createFactory: Ocap_CreateFactoryTx {
    get {
      if case .createFactory(let v)? = value {return v}
      return Ocap_CreateFactoryTx()
    }
    set {value = .createFactory(newValue)}
  }

  public var exchange: Ocap_ExchangeTx {
    get {
      if case .exchange(let v)? = value {return v}
      return Ocap_ExchangeTx()
    }
    set {value = .exchange(newValue)}
  }

  public var exchangeV2: Ocap_ExchangeV2Tx {
    get {
      if case .exchangeV2(let v)? = value {return v}
      return Ocap_ExchangeV2Tx()
    }
    set {value = .exchangeV2(newValue)}
  }

  public var transfer: Ocap_TransferTx {
    get {
      if case .transfer(let v)? = value {return v}
      return Ocap_TransferTx()
    }
    set {value = .transfer(newValue)}
  }

  public var transferV2: Ocap_TransferV2Tx {
    get {
      if case .transferV2(let v)? = value {return v}
      return Ocap_TransferV2Tx()
    }
    set {value = .transferV2(newValue)}
  }

  public var transferV3: Ocap_TransferV3Tx {
    get {
      if case .transferV3(let v)? = value {return v}
      return Ocap_TransferV3Tx()
    }
    set {value = .transferV3(newValue)}
  }

  public var upgradeNode: Ocap_UpgradeNodeTx {
    get {
      if case .upgradeNode(let v)? = value {return v}
      return Ocap_UpgradeNodeTx()
    }
    set {value = .upgradeNode(newValue)}
  }

  public var createToken: Ocap_CreateTokenTx {
    get {
      if case .createToken(let v)? = value {return v}
      return Ocap_CreateTokenTx()
    }
    set {value = .createToken(newValue)}
  }

  public var acquireAssetV2: Ocap_AcquireAssetV2Tx {
    get {
      if case .acquireAssetV2(let v)? = value {return v}
      return Ocap_AcquireAssetV2Tx()
    }
    set {value = .acquireAssetV2(newValue)}
  }

  public var mintAsset: Ocap_MintAssetTx {
    get {
      if case .mintAsset(let v)? = value {return v}
      return Ocap_MintAssetTx()
    }
    set {value = .mintAsset(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case declare(Ocap_DeclareTx)
    case delegate(Ocap_DelegateTx)
    case revokeDelegate(Ocap_RevokeDelegateTx)
    case accountMigrate(Ocap_AccountMigrateTx)
    case createAsset(Ocap_CreateAssetTx)
    case updateAsset(Ocap_UpdateAssetTx)
    case createFactory(Ocap_CreateFactoryTx)
    case exchange(Ocap_ExchangeTx)
    case exchangeV2(Ocap_ExchangeV2Tx)
    case transfer(Ocap_TransferTx)
    case transferV2(Ocap_TransferV2Tx)
    case transferV3(Ocap_TransferV3Tx)
    case upgradeNode(Ocap_UpgradeNodeTx)
    case createToken(Ocap_CreateTokenTx)
    case acquireAssetV2(Ocap_AcquireAssetV2Tx)
    case mintAsset(Ocap_MintAssetTx)

  #if !swift(>=4.1)
    public static func ==(lhs: Ocap_ItxStub.OneOf_Value, rhs: Ocap_ItxStub.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.declare, .declare): return {
        guard case .declare(let l) = lhs, case .declare(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.delegate, .delegate): return {
        guard case .delegate(let l) = lhs, case .delegate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.revokeDelegate, .revokeDelegate): return {
        guard case .revokeDelegate(let l) = lhs, case .revokeDelegate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.accountMigrate, .accountMigrate): return {
        guard case .accountMigrate(let l) = lhs, case .accountMigrate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createAsset, .createAsset): return {
        guard case .createAsset(let l) = lhs, case .createAsset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateAsset, .updateAsset): return {
        guard case .updateAsset(let l) = lhs, case .updateAsset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createFactory, .createFactory): return {
        guard case .createFactory(let l) = lhs, case .createFactory(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.exchange, .exchange): return {
        guard case .exchange(let l) = lhs, case .exchange(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.exchangeV2, .exchangeV2): return {
        guard case .exchangeV2(let l) = lhs, case .exchangeV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transfer, .transfer): return {
        guard case .transfer(let l) = lhs, case .transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transferV2, .transferV2): return {
        guard case .transferV2(let l) = lhs, case .transferV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transferV3, .transferV3): return {
        guard case .transferV3(let l) = lhs, case .transferV3(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.upgradeNode, .upgradeNode): return {
        guard case .upgradeNode(let l) = lhs, case .upgradeNode(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createToken, .createToken): return {
        guard case .createToken(let l) = lhs, case .createToken(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.acquireAssetV2, .acquireAssetV2): return {
        guard case .acquireAssetV2(let l) = lhs, case .acquireAssetV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mintAsset, .mintAsset): return {
        guard case .mintAsset(let l) = lhs, case .mintAsset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ocap"

extension Ocap_AccountMigrateTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountMigrateTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pk"),
    2: .same(proto: "type"),
    3: .same(proto: "address"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.pk) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pk.isEmpty {
      try visitor.visitSingularBytesField(value: self.pk, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_AccountMigrateTx, rhs: Ocap_AccountMigrateTx) -> Bool {
    if lhs.pk != rhs.pk {return false}
    if lhs._type != rhs._type {return false}
    if lhs.address != rhs.address {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_DeclareTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeclareTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "moniker"),
    2: .same(proto: "issuer"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.issuer) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 1)
    }
    if !self.issuer.isEmpty {
      try visitor.visitSingularStringField(value: self.issuer, fieldNumber: 2)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_DeclareTx, rhs: Ocap_DeclareTx) -> Bool {
    if lhs.moniker != rhs.moniker {return false}
    if lhs.issuer != rhs.issuer {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_DelegateTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DelegateTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "to"),
    3: .same(proto: "ops"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.ops) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.ops.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ops, fieldNumber: 3)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_DelegateTx, rhs: Ocap_DelegateTx) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.to != rhs.to {return false}
    if lhs.ops != rhs.ops {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_DelegateOp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DelegateOp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "type_url"),
    2: .same(proto: "rules"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.typeURL) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.rules) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.typeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.typeURL, fieldNumber: 1)
    }
    if !self.rules.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rules, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_DelegateOp, rhs: Ocap_DelegateOp) -> Bool {
    if lhs.typeURL != rhs.typeURL {return false}
    if lhs.rules != rhs.rules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_RevokeDelegateTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RevokeDelegateTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "to"),
    3: .standard(proto: "type_urls"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.typeUrls) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.typeUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.typeUrls, fieldNumber: 3)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_RevokeDelegateTx, rhs: Ocap_RevokeDelegateTx) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.to != rhs.to {return false}
    if lhs.typeUrls != rhs.typeUrls {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_UpdateConsensusParamsTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateConsensusParamsTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegate_config"),
    2: .standard(proto: "declare_config"),
    3: .standard(proto: "token_swap_config"),
    4: .standard(proto: "moderator_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._delegateConfig) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._declareConfig) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tokenSwapConfig) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._moderatorConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._delegateConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._declareConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._tokenSwapConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._moderatorConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_UpdateConsensusParamsTx, rhs: Ocap_UpdateConsensusParamsTx) -> Bool {
    if lhs._delegateConfig != rhs._delegateConfig {return false}
    if lhs._declareConfig != rhs._declareConfig {return false}
    if lhs._tokenSwapConfig != rhs._tokenSwapConfig {return false}
    if lhs._moderatorConfig != rhs._moderatorConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_UpgradeNodeTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpgradeNodeTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "version"),
    3: .same(proto: "override"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.override) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if self.override != false {
      try visitor.visitSingularBoolField(value: self.override, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_UpgradeNodeTx, rhs: Ocap_UpgradeNodeTx) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.version != rhs.version {return false}
    if lhs.override != rhs.override {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_ApproveWithdrawTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApproveWithdrawTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "withdraw_tx_hash"),
    2: .same(proto: "evidence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.withdrawTxHash) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._evidence) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.withdrawTxHash.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawTxHash, fieldNumber: 1)
    }
    if let v = self._evidence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_ApproveWithdrawTx, rhs: Ocap_ApproveWithdrawTx) -> Bool {
    if lhs.withdrawTxHash != rhs.withdrawTxHash {return false}
    if lhs._evidence != rhs._evidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_DepositTokenTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DepositTokenTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "address"),
    3: .same(proto: "evidence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._evidence) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if let v = self._evidence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_DepositTokenTx, rhs: Ocap_DepositTokenTx) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.address != rhs.address {return false}
    if lhs._evidence != rhs._evidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_RevokeWithdrawTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RevokeWithdrawTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "withdraw_tx_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.withdrawTxHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.withdrawTxHash.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawTxHash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_RevokeWithdrawTx, rhs: Ocap_RevokeWithdrawTx) -> Bool {
    if lhs.withdrawTxHash != rhs.withdrawTxHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_WithdrawTokenTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WithdrawTokenTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "to"),
    3: .standard(proto: "chain_type"),
    4: .standard(proto: "chain_id"),
    5: .same(proto: "ttl"),
    6: .same(proto: "hash"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chainType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._ttl) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.chainType.isEmpty {
      try visitor.visitSingularStringField(value: self.chainType, fieldNumber: 3)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 4)
    }
    if let v = self._ttl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 6)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_WithdrawTokenTx, rhs: Ocap_WithdrawTokenTx) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.to != rhs.to {return false}
    if lhs.chainType != rhs.chainType {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs._ttl != rhs._ttl {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_ExchangeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExchangeInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "assets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.assets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_ExchangeInfo, rhs: Ocap_ExchangeInfo) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_ExchangeInfoV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExchangeInfoV2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "assets"),
    3: .same(proto: "tokens"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.assets) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tokens) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assets, fieldNumber: 2)
    }
    if !self.tokens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokens, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_ExchangeInfoV2, rhs: Ocap_ExchangeInfoV2) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.tokens != rhs.tokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_ExchangeTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExchangeTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "sender"),
    3: .same(proto: "receiver"),
    4: .standard(proto: "expired_at"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._sender) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._receiver) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._expiredAt) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if let v = self._sender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._receiver {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._expiredAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_ExchangeTx, rhs: Ocap_ExchangeTx) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs._sender != rhs._sender {return false}
    if lhs._receiver != rhs._receiver {return false}
    if lhs._expiredAt != rhs._expiredAt {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_ExchangeV2Tx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExchangeV2Tx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "sender"),
    3: .same(proto: "receiver"),
    4: .standard(proto: "expired_at"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._sender) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._receiver) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._expiredAt) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if let v = self._sender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._receiver {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._expiredAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_ExchangeV2Tx, rhs: Ocap_ExchangeV2Tx) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs._sender != rhs._sender {return false}
    if lhs._receiver != rhs._receiver {return false}
    if lhs._expiredAt != rhs._expiredAt {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_TransferTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "value"),
    3: .same(proto: "assets"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.assets) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assets, fieldNumber: 3)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_TransferTx, rhs: Ocap_TransferTx) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs._value != rhs._value {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_TransferV2Tx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferV2Tx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "value"),
    3: .same(proto: "assets"),
    4: .same(proto: "tokens"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.assets) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.tokens) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assets, fieldNumber: 3)
    }
    if !self.tokens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokens, fieldNumber: 4)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_TransferV2Tx, rhs: Ocap_TransferV2Tx) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs._value != rhs._value {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.tokens != rhs.tokens {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_TransferV3Tx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferV3Tx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputs"),
    2: .same(proto: "outputs"),
    15: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 1)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 2)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_TransferV3Tx, rhs: Ocap_TransferV3Tx) -> Bool {
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_CreateTokenTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateTokenTx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .same(proto: "symbol"),
    4: .same(proto: "unit"),
    5: .same(proto: "decimal"),
    6: .same(proto: "icon"),
    7: .standard(proto: "total_supply"),
    8: .same(proto: "address"),
    15: .standard(proto: "erc20_contract_address"),
    20: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.unit) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.decimal) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.totalSupply) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.erc20ContractAddress) }()
      case 20: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 4)
    }
    if self.decimal != 0 {
      try visitor.visitSingularInt32Field(value: self.decimal, fieldNumber: 5)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 6)
    }
    if !self.totalSupply.isEmpty {
      try visitor.visitSingularStringField(value: self.totalSupply, fieldNumber: 7)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 8)
    }
    if !self.erc20ContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.erc20ContractAddress, fieldNumber: 15)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_CreateTokenTx, rhs: Ocap_CreateTokenTx) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.decimal != rhs.decimal {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.totalSupply != rhs.totalSupply {return false}
    if lhs.address != rhs.address {return false}
    if lhs.erc20ContractAddress != rhs.erc20ContractAddress {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ocap_ItxStub: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ItxStub"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "declare"),
    2: .same(proto: "delegate"),
    3: .standard(proto: "revoke_delegate"),
    4: .standard(proto: "account_migrate"),
    5: .standard(proto: "create_asset"),
    6: .standard(proto: "update_asset"),
    7: .standard(proto: "create_factory"),
    9: .same(proto: "exchange"),
    10: .standard(proto: "exchange_v2"),
    11: .same(proto: "transfer"),
    12: .standard(proto: "transfer_v2"),
    13: .standard(proto: "transfer_v3"),
    15: .standard(proto: "upgrade_node"),
    19: .standard(proto: "create_token"),
    20: .standard(proto: "acquire_asset_v2"),
    21: .standard(proto: "mint_asset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Ocap_DeclareTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .declare(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .declare(v)}
      }()
      case 2: try {
        var v: Ocap_DelegateTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .delegate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .delegate(v)}
      }()
      case 3: try {
        var v: Ocap_RevokeDelegateTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .revokeDelegate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .revokeDelegate(v)}
      }()
      case 4: try {
        var v: Ocap_AccountMigrateTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .accountMigrate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .accountMigrate(v)}
      }()
      case 5: try {
        var v: Ocap_CreateAssetTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .createAsset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .createAsset(v)}
      }()
      case 6: try {
        var v: Ocap_UpdateAssetTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .updateAsset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .updateAsset(v)}
      }()
      case 7: try {
        var v: Ocap_CreateFactoryTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .createFactory(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .createFactory(v)}
      }()
      case 9: try {
        var v: Ocap_ExchangeTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .exchange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .exchange(v)}
      }()
      case 10: try {
        var v: Ocap_ExchangeV2Tx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .exchangeV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .exchangeV2(v)}
      }()
      case 11: try {
        var v: Ocap_TransferTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .transfer(v)}
      }()
      case 12: try {
        var v: Ocap_TransferV2Tx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .transferV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .transferV2(v)}
      }()
      case 13: try {
        var v: Ocap_TransferV3Tx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .transferV3(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .transferV3(v)}
      }()
      case 15: try {
        var v: Ocap_UpgradeNodeTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .upgradeNode(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .upgradeNode(v)}
      }()
      case 19: try {
        var v: Ocap_CreateTokenTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .createToken(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .createToken(v)}
      }()
      case 20: try {
        var v: Ocap_AcquireAssetV2Tx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .acquireAssetV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .acquireAssetV2(v)}
      }()
      case 21: try {
        var v: Ocap_MintAssetTx?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .mintAsset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .mintAsset(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.value {
    case .declare?: try {
      guard case .declare(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .delegate?: try {
      guard case .delegate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .revokeDelegate?: try {
      guard case .revokeDelegate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .accountMigrate?: try {
      guard case .accountMigrate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .createAsset?: try {
      guard case .createAsset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .updateAsset?: try {
      guard case .updateAsset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .createFactory?: try {
      guard case .createFactory(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .exchange?: try {
      guard case .exchange(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .exchangeV2?: try {
      guard case .exchangeV2(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .transfer?: try {
      guard case .transfer(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .transferV2?: try {
      guard case .transferV2(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .transferV3?: try {
      guard case .transferV3(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .upgradeNode?: try {
      guard case .upgradeNode(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .createToken?: try {
      guard case .createToken(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .acquireAssetV2?: try {
      guard case .acquireAssetV2(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .mintAsset?: try {
      guard case .mintAsset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ocap_ItxStub, rhs: Ocap_ItxStub) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
